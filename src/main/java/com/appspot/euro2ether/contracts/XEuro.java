package com.appspot.euro2ether.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class XEuro extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_REMOVEFROMCANTRANSFERFROMCONTRACT = "removeFromCanTransferFromContract";

    public static final String FUNC_BURNTOKENS = "burnTokens";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_CHANGEMINEXCHANGEAMOUNT = "changeMinExchangeAmount";

    public static final String FUNC_CANTRANSFERFROMCONTRACT = "canTransferFromContract";

    public static final String FUNC_BURNTOKENSEVENTSCOUNTER = "burnTokensEventsCounter";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_ADDTOCANTRANSFERFROMCONTRACT = "addToCanTransferFromContract";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_MINTTOKENS = "mintTokens";

    public static final String FUNC_REMOVEFROMCANBURN = "removeFromCanBurn";

    public static final String FUNC_CRYPTONOMICAVERIFICATION = "cryptonomicaVerification";

    public static final String FUNC_CANBURN = "canBurn";

    public static final String FUNC_MINTTOKENSEVENT = "mintTokensEvent";

    public static final String FUNC_TRANSFERANDCALL = "transferAndCall";

    public static final String FUNC_TOKENSINTRANSFER = "tokensInTransfer";

    public static final String FUNC_MINEXCHANGEAMOUNT = "minExchangeAmount";

    public static final String FUNC_MINTANDTRANSFER = "mintAndTransfer";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_REMOVEFROMCANMINT = "removeFromCanMint";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CHANGECRYPTONOMICAVERIFICATIONCONTRACTADDRESS = "changeCryptonomicaVerificationContractAddress";

    public static final String FUNC_ADDTOCANMINT = "addToCanMint";

    public static final String FUNC_MINTTOKENSEVENTSCOUNTER = "mintTokensEventsCounter";

    public static final String FUNC_ADDTOCANBURN = "addToCanBurn";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_BURNTOKENSEVENTS = "burnTokensEvents";

    public static final String FUNC_TOKENSINEVENTSCOUNTER = "tokensInEventsCounter";

    public static final String FUNC_CANMINT = "canMint";

    public static final String FUNC_FIATOUTPAYMENTIDSUSED = "fiatOutPaymentIdsUsed";

    public static final String FUNC_FIATINPAYMENTIDS = "fiatInPaymentIds";

    public static final String FUNC_TRANSFERALLANDCALL = "transferAllAndCall";

    public static final String FUNC_FIATINPAYMENTSTOMINTTOKENSEVENT = "fiatInPaymentsToMintTokensEvent";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DATASENTTOANOTHERCONTRACT_EVENT = new Event("DataSentToAnotherContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event CRYPTONOMICAARBITRATIONCONTRACTADDRESSCHANGED_EVENT = new Event("CryptonomicaArbitrationContractAddressChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ADMINADDED_EVENT = new Event("AdminAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ADMINREMOVED_EVENT = new Event("AdminRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MINEXCHANGEAMOUNTCHANGED_EVENT = new Event("MinExchangeAmountChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ADDRESSADDEDTOCANMINT_EVENT = new Event("AddressAddedToCanMint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ADDRESSREMOVEDFROMCANMINT_EVENT = new Event("AddressRemovedFromCanMint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ADDRESSADDEDTOCANTRANSFERFROMCONTRACT_EVENT = new Event("AddressAddedToCanTransferFromContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ADDRESSREMOVEDFROMCANTRANSFERFROMCONTRACT_EVENT = new Event("AddressRemovedFromCanTransferFromContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ADDRESSADDEDTOCANBURN_EVENT = new Event("AddressAddedToCanBurn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ADDRESSREMOVEDFROMCANBURN_EVENT = new Event("AddressRemovedFromCanBurn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TOKENSMINTED_EVENT = new Event("TokensMinted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TOKENSIN_EVENT = new Event("TokensIn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TOKENSBURNED_EVENT = new Event("TokensBurned", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected XEuro(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected XEuro(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected XEuro(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected XEuro(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> removeFromCanTransferFromContract(String _addressToRemove) {
        final Function function = new Function(
                FUNC_REMOVEFROMCANTRANSFERFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addressToRemove)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> burnTokens(BigInteger value, BigInteger tokensInEventId, BigInteger fiatOutPaymentId) {
        final Function function = new Function(
                FUNC_BURNTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(tokensInEventId), 
                new org.web3j.abi.datatypes.generated.Uint256(fiatOutPaymentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeMinExchangeAmount(BigInteger _minExchangeAmount) {
        final Function function = new Function(
                FUNC_CHANGEMINEXCHANGEAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_minExchangeAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> canTransferFromContract(String param0) {
        final Function function = new Function(FUNC_CANTRANSFERFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> burnTokensEventsCounter() {
        final Function function = new Function(FUNC_BURNTOKENSEVENTSCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(String _oldAdmin) {
        final Function function = new Function(
                FUNC_REMOVEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_oldAdmin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isAdmin(String param0) {
        final Function function = new Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> addToCanTransferFromContract(String _newAddress) {
        final Function function = new Function(
                FUNC_ADDTOCANTRANSFERFROMCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> mintTokens(BigInteger value, BigInteger fiatInPaymentId) {
        final Function function = new Function(
                FUNC_MINTTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(fiatInPaymentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeFromCanBurn(String _addressToRemove) {
        final Function function = new Function(
                FUNC_REMOVEFROMCANBURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addressToRemove)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> cryptonomicaVerification() {
        final Function function = new Function(FUNC_CRYPTONOMICAVERIFICATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> canBurn(String param0) {
        final Function function = new Function(FUNC_CANBURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>> mintTokensEvent(BigInteger param0) {
        final Function function = new Function(FUNC_MINTTOKENSEVENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> transferAndCall(String _to, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                FUNC_TRANSFERANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _currentValue, BigInteger _value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_currentValue), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> tokensInTransfer(BigInteger param0) {
        final Function function = new Function(FUNC_TOKENSINTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> minExchangeAmount() {
        final Function function = new Function(FUNC_MINEXCHANGEAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> mintAndTransfer(BigInteger _value, BigInteger fiatInPaymentId, String _to) {
        final Function function = new Function(
                FUNC_MINTANDTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.generated.Uint256(fiatInPaymentId), 
                new org.web3j.abi.datatypes.Address(_to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(String _newAdmin) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newAdmin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeFromCanMint(String _addressToRemove) {
        final Function function = new Function(
                FUNC_REMOVEFROMCANMINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addressToRemove)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String param0) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> changeCryptonomicaVerificationContractAddress(String _newAddress) {
        final Function function = new Function(
                FUNC_CHANGECRYPTONOMICAVERIFICATIONCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addToCanMint(String _newAddress) {
        final Function function = new Function(
                FUNC_ADDTOCANMINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> mintTokensEventsCounter() {
        final Function function = new Function(FUNC_MINTTOKENSEVENTSCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addToCanBurn(String _newAddress) {
        final Function function = new Function(
                FUNC_ADDTOCANBURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> burnTokensEvents(BigInteger param0) {
        final Function function = new Function(FUNC_BURNTOKENSEVENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> tokensInEventsCounter() {
        final Function function = new Function(FUNC_TOKENSINEVENTSCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> canMint(String param0) {
        final Function function = new Function(FUNC_CANMINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> fiatOutPaymentIdsUsed(BigInteger param0) {
        final Function function = new Function(FUNC_FIATOUTPAYMENTIDSUSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> fiatInPaymentIds(BigInteger param0) {
        final Function function = new Function(FUNC_FIATINPAYMENTIDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> transferAllAndCall(String _to, byte[] _extraData) {
        final Function function = new Function(
                FUNC_TRANSFERALLANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>> fiatInPaymentsToMintTokensEvent(BigInteger param0) {
        final Function function = new Function(FUNC_FIATINPAYMENTSTOMINTTOKENSEVENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> allowance(String param0, String param1) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<DataSentToAnotherContractEventResponse> getDataSentToAnotherContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DATASENTTOANOTHERCONTRACT_EVENT, transactionReceipt);
        ArrayList<DataSentToAnotherContractEventResponse> responses = new ArrayList<DataSentToAnotherContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DataSentToAnotherContractEventResponse typedResponse = new DataSentToAnotherContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._toContract = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._extraData = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DataSentToAnotherContractEventResponse> dataSentToAnotherContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DataSentToAnotherContractEventResponse>() {
            @Override
            public DataSentToAnotherContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DATASENTTOANOTHERCONTRACT_EVENT, log);
                DataSentToAnotherContractEventResponse typedResponse = new DataSentToAnotherContractEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._toContract = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._extraData = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DataSentToAnotherContractEventResponse> dataSentToAnotherContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DATASENTTOANOTHERCONTRACT_EVENT));
        return dataSentToAnotherContractEventFlowable(filter);
    }

    public List<CryptonomicaArbitrationContractAddressChangedEventResponse> getCryptonomicaArbitrationContractAddressChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CRYPTONOMICAARBITRATIONCONTRACTADDRESSCHANGED_EVENT, transactionReceipt);
        ArrayList<CryptonomicaArbitrationContractAddressChangedEventResponse> responses = new ArrayList<CryptonomicaArbitrationContractAddressChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CryptonomicaArbitrationContractAddressChangedEventResponse typedResponse = new CryptonomicaArbitrationContractAddressChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CryptonomicaArbitrationContractAddressChangedEventResponse> cryptonomicaArbitrationContractAddressChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CryptonomicaArbitrationContractAddressChangedEventResponse>() {
            @Override
            public CryptonomicaArbitrationContractAddressChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CRYPTONOMICAARBITRATIONCONTRACTADDRESSCHANGED_EVENT, log);
                CryptonomicaArbitrationContractAddressChangedEventResponse typedResponse = new CryptonomicaArbitrationContractAddressChangedEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CryptonomicaArbitrationContractAddressChangedEventResponse> cryptonomicaArbitrationContractAddressChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CRYPTONOMICAARBITRATIONCONTRACTADDRESSCHANGED_EVENT));
        return cryptonomicaArbitrationContractAddressChangedEventFlowable(filter);
    }

    public List<AdminAddedEventResponse> getAdminAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINADDED_EVENT, transactionReceipt);
        ArrayList<AdminAddedEventResponse> responses = new ArrayList<AdminAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminAddedEventResponse> adminAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AdminAddedEventResponse>() {
            @Override
            public AdminAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINADDED_EVENT, log);
                AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminAddedEventResponse> adminAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDED_EVENT));
        return adminAddedEventFlowable(filter);
    }

    public List<AdminRemovedEventResponse> getAdminRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINREMOVED_EVENT, transactionReceipt);
        ArrayList<AdminRemovedEventResponse> responses = new ArrayList<AdminRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminRemovedEventResponse typedResponse = new AdminRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._oldAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminRemovedEventResponse> adminRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AdminRemovedEventResponse>() {
            @Override
            public AdminRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINREMOVED_EVENT, log);
                AdminRemovedEventResponse typedResponse = new AdminRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._oldAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminRemovedEventResponse> adminRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINREMOVED_EVENT));
        return adminRemovedEventFlowable(filter);
    }

    public List<MinExchangeAmountChangedEventResponse> getMinExchangeAmountChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINEXCHANGEAMOUNTCHANGED_EVENT, transactionReceipt);
        ArrayList<MinExchangeAmountChangedEventResponse> responses = new ArrayList<MinExchangeAmountChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MinExchangeAmountChangedEventResponse typedResponse = new MinExchangeAmountChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MinExchangeAmountChangedEventResponse> minExchangeAmountChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MinExchangeAmountChangedEventResponse>() {
            @Override
            public MinExchangeAmountChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINEXCHANGEAMOUNTCHANGED_EVENT, log);
                MinExchangeAmountChangedEventResponse typedResponse = new MinExchangeAmountChangedEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.to = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MinExchangeAmountChangedEventResponse> minExchangeAmountChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINEXCHANGEAMOUNTCHANGED_EVENT));
        return minExchangeAmountChangedEventFlowable(filter);
    }

    public List<AddressAddedToCanMintEventResponse> getAddressAddedToCanMintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDRESSADDEDTOCANMINT_EVENT, transactionReceipt);
        ArrayList<AddressAddedToCanMintEventResponse> responses = new ArrayList<AddressAddedToCanMintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddressAddedToCanMintEventResponse typedResponse = new AddressAddedToCanMintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddressAddedToCanMintEventResponse> addressAddedToCanMintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddressAddedToCanMintEventResponse>() {
            @Override
            public AddressAddedToCanMintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDRESSADDEDTOCANMINT_EVENT, log);
                AddressAddedToCanMintEventResponse typedResponse = new AddressAddedToCanMintEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddressAddedToCanMintEventResponse> addressAddedToCanMintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDRESSADDEDTOCANMINT_EVENT));
        return addressAddedToCanMintEventFlowable(filter);
    }

    public List<AddressRemovedFromCanMintEventResponse> getAddressRemovedFromCanMintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDRESSREMOVEDFROMCANMINT_EVENT, transactionReceipt);
        ArrayList<AddressRemovedFromCanMintEventResponse> responses = new ArrayList<AddressRemovedFromCanMintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddressRemovedFromCanMintEventResponse typedResponse = new AddressRemovedFromCanMintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.removedAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddressRemovedFromCanMintEventResponse> addressRemovedFromCanMintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddressRemovedFromCanMintEventResponse>() {
            @Override
            public AddressRemovedFromCanMintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDRESSREMOVEDFROMCANMINT_EVENT, log);
                AddressRemovedFromCanMintEventResponse typedResponse = new AddressRemovedFromCanMintEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.removedAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddressRemovedFromCanMintEventResponse> addressRemovedFromCanMintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDRESSREMOVEDFROMCANMINT_EVENT));
        return addressRemovedFromCanMintEventFlowable(filter);
    }

    public List<AddressAddedToCanTransferFromContractEventResponse> getAddressAddedToCanTransferFromContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDRESSADDEDTOCANTRANSFERFROMCONTRACT_EVENT, transactionReceipt);
        ArrayList<AddressAddedToCanTransferFromContractEventResponse> responses = new ArrayList<AddressAddedToCanTransferFromContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddressAddedToCanTransferFromContractEventResponse typedResponse = new AddressAddedToCanTransferFromContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddressAddedToCanTransferFromContractEventResponse> addressAddedToCanTransferFromContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddressAddedToCanTransferFromContractEventResponse>() {
            @Override
            public AddressAddedToCanTransferFromContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDRESSADDEDTOCANTRANSFERFROMCONTRACT_EVENT, log);
                AddressAddedToCanTransferFromContractEventResponse typedResponse = new AddressAddedToCanTransferFromContractEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddressAddedToCanTransferFromContractEventResponse> addressAddedToCanTransferFromContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDRESSADDEDTOCANTRANSFERFROMCONTRACT_EVENT));
        return addressAddedToCanTransferFromContractEventFlowable(filter);
    }

    public List<AddressRemovedFromCanTransferFromContractEventResponse> getAddressRemovedFromCanTransferFromContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDRESSREMOVEDFROMCANTRANSFERFROMCONTRACT_EVENT, transactionReceipt);
        ArrayList<AddressRemovedFromCanTransferFromContractEventResponse> responses = new ArrayList<AddressRemovedFromCanTransferFromContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddressRemovedFromCanTransferFromContractEventResponse typedResponse = new AddressRemovedFromCanTransferFromContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.removedAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddressRemovedFromCanTransferFromContractEventResponse> addressRemovedFromCanTransferFromContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddressRemovedFromCanTransferFromContractEventResponse>() {
            @Override
            public AddressRemovedFromCanTransferFromContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDRESSREMOVEDFROMCANTRANSFERFROMCONTRACT_EVENT, log);
                AddressRemovedFromCanTransferFromContractEventResponse typedResponse = new AddressRemovedFromCanTransferFromContractEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.removedAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddressRemovedFromCanTransferFromContractEventResponse> addressRemovedFromCanTransferFromContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDRESSREMOVEDFROMCANTRANSFERFROMCONTRACT_EVENT));
        return addressRemovedFromCanTransferFromContractEventFlowable(filter);
    }

    public List<AddressAddedToCanBurnEventResponse> getAddressAddedToCanBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDRESSADDEDTOCANBURN_EVENT, transactionReceipt);
        ArrayList<AddressAddedToCanBurnEventResponse> responses = new ArrayList<AddressAddedToCanBurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddressAddedToCanBurnEventResponse typedResponse = new AddressAddedToCanBurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddressAddedToCanBurnEventResponse> addressAddedToCanBurnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddressAddedToCanBurnEventResponse>() {
            @Override
            public AddressAddedToCanBurnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDRESSADDEDTOCANBURN_EVENT, log);
                AddressAddedToCanBurnEventResponse typedResponse = new AddressAddedToCanBurnEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddressAddedToCanBurnEventResponse> addressAddedToCanBurnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDRESSADDEDTOCANBURN_EVENT));
        return addressAddedToCanBurnEventFlowable(filter);
    }

    public List<AddressRemovedFromCanBurnEventResponse> getAddressRemovedFromCanBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDRESSREMOVEDFROMCANBURN_EVENT, transactionReceipt);
        ArrayList<AddressRemovedFromCanBurnEventResponse> responses = new ArrayList<AddressRemovedFromCanBurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddressRemovedFromCanBurnEventResponse typedResponse = new AddressRemovedFromCanBurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.removedAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddressRemovedFromCanBurnEventResponse> addressRemovedFromCanBurnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddressRemovedFromCanBurnEventResponse>() {
            @Override
            public AddressRemovedFromCanBurnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDRESSREMOVEDFROMCANBURN_EVENT, log);
                AddressRemovedFromCanBurnEventResponse typedResponse = new AddressRemovedFromCanBurnEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.removedAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddressRemovedFromCanBurnEventResponse> addressRemovedFromCanBurnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDRESSREMOVEDFROMCANBURN_EVENT));
        return addressRemovedFromCanBurnEventFlowable(filter);
    }

    public List<TokensMintedEventResponse> getTokensMintedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENSMINTED_EVENT, transactionReceipt);
        ArrayList<TokensMintedEventResponse> responses = new ArrayList<TokensMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokensMintedEventResponse typedResponse = new TokensMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.fiatInPaymentId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.mintTokensEventsCounter = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.currentTotalSupply = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokensMintedEventResponse> tokensMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TokensMintedEventResponse>() {
            @Override
            public TokensMintedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENSMINTED_EVENT, log);
                TokensMintedEventResponse typedResponse = new TokensMintedEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.fiatInPaymentId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.mintTokensEventsCounter = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.currentTotalSupply = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokensMintedEventResponse> tokensMintedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSMINTED_EVENT));
        return tokensMintedEventFlowable(filter);
    }

    public List<TokensInEventResponse> getTokensInEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENSIN_EVENT, transactionReceipt);
        ArrayList<TokensInEventResponse> responses = new ArrayList<TokensInEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokensInEventResponse typedResponse = new TokensInEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokensInEventsCounter = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokensInEventResponse> tokensInEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TokensInEventResponse>() {
            @Override
            public TokensInEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENSIN_EVENT, log);
                TokensInEventResponse typedResponse = new TokensInEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokensInEventsCounter = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokensInEventResponse> tokensInEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSIN_EVENT));
        return tokensInEventFlowable(filter);
    }

    public List<TokensBurnedEventResponse> getTokensBurnedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENSBURNED_EVENT, transactionReceipt);
        ArrayList<TokensBurnedEventResponse> responses = new ArrayList<TokensBurnedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokensBurnedEventResponse typedResponse = new TokensBurnedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokensInEventId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.fiatOutPaymentId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.burnedOn = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currentTotalSupply = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokensBurnedEventResponse> tokensBurnedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TokensBurnedEventResponse>() {
            @Override
            public TokensBurnedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENSBURNED_EVENT, log);
                TokensBurnedEventResponse typedResponse = new TokensBurnedEventResponse();
                typedResponse.log = log;
                typedResponse.by = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokensInEventId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.fiatOutPaymentId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.burnedOn = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currentTotalSupply = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokensBurnedEventResponse> tokensBurnedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSBURNED_EVENT));
        return tokensBurnedEventFlowable(filter);
    }

    @Deprecated
    public static XEuro load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new XEuro(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static XEuro load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new XEuro(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static XEuro load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new XEuro(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static XEuro load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new XEuro(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<XEuro> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(XEuro.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<XEuro> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(XEuro.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<XEuro> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(XEuro.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<XEuro> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(XEuro.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }

    public static class DataSentToAnotherContractEventResponse {
        public Log log;

        public String _from;

        public String _toContract;

        public byte[] _extraData;
    }

    public static class CryptonomicaArbitrationContractAddressChangedEventResponse {
        public Log log;

        public String by;

        public String from;

        public String to;
    }

    public static class AdminAddedEventResponse {
        public Log log;

        public String by;

        public String newAdmin;
    }

    public static class AdminRemovedEventResponse {
        public Log log;

        public String by;

        public String _oldAdmin;
    }

    public static class MinExchangeAmountChangedEventResponse {
        public Log log;

        public String by;

        public BigInteger from;

        public BigInteger to;
    }

    public static class AddressAddedToCanMintEventResponse {
        public Log log;

        public String by;

        public String newAddress;
    }

    public static class AddressRemovedFromCanMintEventResponse {
        public Log log;

        public String by;

        public String removedAddress;
    }

    public static class AddressAddedToCanTransferFromContractEventResponse {
        public Log log;

        public String by;

        public String newAddress;
    }

    public static class AddressRemovedFromCanTransferFromContractEventResponse {
        public Log log;

        public String by;

        public String removedAddress;
    }

    public static class AddressAddedToCanBurnEventResponse {
        public Log log;

        public String by;

        public String newAddress;
    }

    public static class AddressRemovedFromCanBurnEventResponse {
        public Log log;

        public String by;

        public String removedAddress;
    }

    public static class TokensMintedEventResponse {
        public Log log;

        public String by;

        public BigInteger fiatInPaymentId;

        public BigInteger mintTokensEventsCounter;

        public BigInteger value;

        public BigInteger currentTotalSupply;
    }

    public static class TokensInEventResponse {
        public Log log;

        public String from;

        public BigInteger tokensInEventsCounter;

        public BigInteger value;
    }

    public static class TokensBurnedEventResponse {
        public Log log;

        public String by;

        public BigInteger tokensInEventId;

        public BigInteger fiatOutPaymentId;

        public BigInteger value;

        public BigInteger burnedOn;

        public BigInteger currentTotalSupply;
    }
}
